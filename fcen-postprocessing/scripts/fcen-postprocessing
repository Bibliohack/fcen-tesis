#!/bin/bash

tt=`date +%s` # inicio_ns=`date +%s%N`
me=`basename "$0"`
# ej: fcen-postprocessing src=/path/to/tifs wrk=/path/to/out default

# ------

# Paths to executables

 SE_BIN="/opt/src/scantailor-enhanced/scantailor-cli" #Scantailor enhanced exec path
 FILTER_DIR="~/bin/filters"

# Default values 

 #EXT="tif"
 EXT='*.tif *.TIF'

 # Working folders
 WORKING_BASE="$(pwd)"
 SCANTAILOR_SOURCE_DIR="$(pwd)"
 PROC_DIR=".processing"
 HPASS_DIR=".hpass"

 # Scantailor 
 SCANTAILOR_LMODE="-l=1"     # Scantailor layout mode
 SCANTAILOR_CMODE=""         # Scantailor color mode arguments
 SCANTAILOR_SEGM=""          # Scantailor detect page/content arguments
 SCANTAILOR_THRESHOLD="--threshold=0"  # Scantailor threshold arguments

 # Tesseract
 TESSERACT_ARGS=""

 # PDFbeads
 PDFBEADS_ARGS="-b JPEG"      # jpeg2 "-b JP2"

# Process arguments

while [ $# -ne 0 ]
do
    arg="$1"
    case "$arg" in
        src=*)
            SCANTAILOR_SOURCE_DIR="${arg#*=}"
            ;;
        wrk=*)
            WORKING_BASE="${arg#*=}"
            [[ -z "$OUT_PDF_DIR" ]] && OUT_PDF_DIR="${WORKING_BASE}"
            [[ -z "$OUT_LOGS_DIR" ]] && OUT_LOGS_DIR="${WORKING_BASE}"
            ;;
        log=*)
            OUT_LOGS_DIR="${arg#*=}"
            ;;
        out=*)
            OUT_PDF_DIR="${arg#*=}"
            ;;
            
        layout-oneandhalf)
            M="${M}layout-oneandhalf "
            SCANTAILOR_LMODE="1.5"
            ;;
        default)
            M="${M}default "
            SCANTAILOR_SEGM="--disable-content-detection --enable-page-detection --enable-fine-tuning --margins=0"
            SCANTAILOR_CMODE="--picture-shape=rectangular --color-mode=mixed"
            ;;
        content-detection)
            M="${M}content-detection "
            SCANTAILOR_SEGM="--content-detection=aggressive --margins=5 --despeckle=aggressive"
            ;;
        bolder-text)
            M="${M}bolder-text "
            SCANTAILOR_THRESHOLD="--threshold=5"
            ;;
        only-text-justified)
            M="${M}only-text-justified "
            TESSERACT_ARGS="-psm 6"
            ;;
        hpass-prefilter)
            M="${M}hpass-prefilter "
            HPASS_FILTER="Yes"
            ;;
        clear)
            CLEAR="Yes"
            ;;
        *)
            NOARGS="Yes"
            ;;
    esac
    shift
done

# PDF out file
[[ -z "$OUT_PDF_DIR" ]] && OUT_PDF_DIR="${WORKING_BASE}"
OUT_PDF_NAME="tesis.pdf"

# Log paths
[[ -z "$OUT_LOGS_DIR" ]] && OUT_LOGS_DIR="${WORKING_BASE}"
OCR_ERROR_PATH="${OUT_LOGS_DIR}/OCR_ERROR"
SCT_ERROR_PATH="${OUT_LOGS_DIR}/SCANTAILOR_ERROR"
STATS_PATH="${OUT_LOGS_DIR}/STATS"
LOG_PATH="${OUT_LOGS_DIR}/LOG"
RENAMED_PATH="${OUT_LOGS_DIR}/RENAMED_FILES"

if [ "$CLEAR" == "Yes" ]
 then
  # ==== CLEAR & EXIT =====
  echo
  for p in "$WORKING_BASE/$PROC_DIR" "$WORKING_BASE/$HPASS_DIR"
  do
    [[ -d "$p" ]] && { echo " [!] clear $p"; rm -fR "$p" || exit 0; }
  done
  # clear files:
  for f in "$OUT_PDF_DIR/$OUT_PDF_NAME" \
    "$OCR_ERROR_PATH" \
    "$LOG_PATH" \
    "$STATS_PATH" \
    "$SCT_ERROR_PATH" \
    "$RENAMED_PATH"
  do
    [[ -f "$f" ]] && { echo " [!] clear $f"; rm -f "$f" || exit 0; }
  done
  echo -e "\nclear OK, exit...\n"
  exit 0
fi


# check folders
[[ -d "$WORKING_BASE" ]] || { mkdir "$WORKING_BASE" || exit 0; }
[[ -d "$WORKING_BASE/$PROC_DIR" ]] || { mkdir "$WORKING_BASE/$PROC_DIR" || exit 0; }
[[ -d "$OUT_LOGS_DIR" ]] || { echo "[ERROR] no existe $OUT_LOGS_DIR"; exit 0;}

# ===============

#  exec > "$LOG_PATH" # stdout to logfile
#  exec > >(tee -a "$LOG_PATH") # stdout to term & logfile (default)
echo "[$me] $(date +%Y-%m-%d\ %T)"
echo "Mode[s]: $M" 

( printf "=============== INFO ===============\n"
printf " Mode[s]: $M\n"
printf " Source dir: $SCANTAILOR_SOURCE_DIR\n"
printf " Working base dir: $WORKING_BASE\n"
printf " Process folder:   $WORKING_BASE/$PROC_DIR\n"
printf " Hpass folder:     $WORKING_BASE/$HPASS_DIR\n"
printf " PDF file path: $OUT_PDF_DIR/$OUT_PDF_NAME\n"
printf " Logs dir: $OUT_LOGS_DIR\n" ) >> "$LOG_PATH"

# ---------------

if [ "$HPASS_FILTER" == "Yes" ]
 then
  SCANTAILOR_SOURCE_DIR="$WORKING_BASE/$HPASS_DIR"
  printf "\n======== PREFILTER HIGHPASS ========\n" >> "$LOG_PATH"
  # t=`date +%s`
  # ${FILTER_DIR}/hpass "$WORKING_BASE/$HPASS_DIR"
  # HpassTime=$(expr `date +%s` - $t)
fi

printf "\n============ SCANTAILOR ============\n" >> "$LOG_PATH"

cd "$SCANTAILOR_SOURCE_DIR"

shopt -s nullglob; 
stFiles=($EXT); 
shopt -u nullglob;

if [ -z $stFiles ] ; then echo "ERROR: no hay archivos para procesar en $SCANTAILOR_SOURCE_DIR" | tee -a "$LOG_PATH"; exit 0; fi

#echo; echo "${stFiles[@]}"; echo

CMD_SCANTAILOR='"$SE_BIN" -v $SCANTAILOR_LMODE $SCANTAILOR_SEGM $SCANTAILOR_THRESHOLD $SCANTAILOR_CMODE "${stFiles[@]}" "$WORKING_BASE/$PROC_DIR/"'

printf "[CMD]:\n"$(eval "echo $CMD_SCANTAILOR")"\n" > "$LOG_PATH"

t=`date +%s`

echo -n "Scantailor processing"
eval $CMD_SCANTAILOR > >(tee -a "$LOG_PATH") 2> >(tee "$SCT_ERROR_PATH" >&2) | awk '{ printf "." }'; echo -n "done"

ScantailorTime=$(expr `date +%s` - $t); echo -n " - ${ScantailorTime}s";

{ [[ -f "$SCT_ERROR_PATH" ]] && [[ ! -s "$SCT_ERROR_PATH" ]]; } && { rm "$SCT_ERROR_PATH"; echo -n " - No errors";}
echo

# ============================================================

# set current dir to Tesseract and Pdfbeads
cd "$WORKING_BASE/$PROC_DIR/"

printf "\n============ RENAMING =============\n" >> "$LOG_PATH"

# renaming paths with spaces (pdfbeads bug)
# note: scantailor output filetype always ".tif" (?)

echo -n "Renaming"

for fr in *.tif
do
  if [[ $fr == *\ * ]]
   then
    RENAMING="Yes"
    frWithoutSpaces=${fr// /_}
    printf " Renaming: $fr to $frWithoutSpaces\n" | tee -a "$LOG_PATH" >> "$RENAMED_PATH"
    echo -n "."
    mv -- "$fr" "$frWithoutSpaces"
       # (Los guiones previenen error de nombres de archivos que empiezan con guiÃ³n)
  fi
done

if [ "$RENAMING" == "Yes" ]; then echo "done"; else echo " - no file had to be renamed"; fi

printf "\n============ TESSERACT =============\n" >> "$LOG_PATH"

echo -n "Tesseract processing"

t=`date +%s`; c=0
for i in *.tif
do 
   let c=c+1 
   CMD_TESSERACT='tesseract "$i" "`basename "$i" .tif`" -l spa $TESSERACT_ARGS hocr 2>&1'

   echo -n "." 
   printf "[CMD $c]:\n"$(eval "echo $CMD_TESSERACT")"\n" >> "$LOG_PATH";

   d=`date +%s`; 
   out=$(eval $CMD_TESSERACT)

   printf "Time: "$(expr `date +%s` - $d)"s\n" >> "$LOG_PATH"

   if [ "$out" != "Tesseract Open Source OCR Engine v3.03 with Leptonica" ]
    then
     printf "$out\n" >> "$LOG_PATH"
     echo -n "!"
     printf "Page $c ["$(date +%Y-%m-%d\ %T)"]:\n$out" >> "$OCR_ERROR_PATH"
   fi
done
echo -n "done"
TesseractTime=$(expr `date +%s` - $t); echo -n " - ${TesseractTime}s - $c pages";
NumberOfPages=$c

{ [[ -f "$OCR_ERROR_PATH" ]] && [[ ! -s "$OCR_ERROR_PATH" ]]; } && { rm "$OCR_ERROR_PATH"; echo -n "No errors" ;}
echo

printf "\n============ PDFBEADS ==============\n" >> "$LOG_PATH"

# note: pdfbeads bugs -> http://ssdigit.nothingisreal.com/2012/09/experiences-with-pdfbeads.html

#pdfbeadsFiles=(*.tif)
#CMD_PDFBEADS='pdfbeads $PDFBEADS_ARGS "${pdfbeadsFiles[@]}" > "$OUT_PDF_DIR/$OUT_PDF_NAME"'
# problemas entre pdfbeads y arrays de bash?

#echo "[CMD]:"; echo $(eval "echo $CMD_PDFBEADS"); echo

t=`date +%s`

# eval $CMD_PDFBEADS 2>&1 

printf "[CMD]:\npdfbeads $PDFBEADS_ARGS *.tif > $OUT_PDF_DIR/$OUT_PDF_NAME\n" >> "$LOG_PATH"
echo -n "PDFbeads processing"
(pdfbeads $PDFBEADS_ARGS *.tif >"$OUT_PDF_DIR/$OUT_PDF_NAME" 2> >(tee -a "$LOG_PATH" >&2)) 2>&1 | awk '{ printf "." }'
echo -n "done"
PdfbeadsTime=$(expr `date +%s` - $t); echo " - ${PdfbeadsTime}s";

# ------


TotalTime=$(expr `date +%s` - $tt); echo "Total Time: ${TotalTime}s | Number of pages: $NumberOfPages";
AverageTime=$(expr $TotalTime / $NumberOfPages)

( printf "# Document info\n\n"
printf "NumberOfPages:  $NumberOfPages\n\n"
printf "# Execution time (in seconds, integer values):\n\n"
printf "ScantailorTime: $ScantailorTime\n"
printf "TesseractTime:  $TesseractTime\n"
printf "PdfbeadsTime:   $PdfbeadsTime\n"
printf "TotalTime:      $TotalTime\n"
printf "AverageTime:    $AverageTime\n" ) | tee "$STATS_PATH" >> "$LOG_PATH"


# # [[ $str == *['!'@#\$%^\&*()_+]* ]]

# https://addons.mozilla.org/es/firefox/addon/hocr-editor/
